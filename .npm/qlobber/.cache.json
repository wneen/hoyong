{"_id":"qlobber","_rev":"36-3c57e1f0a7561ff35d6618627ed6ec6a","name":"qlobber","description":"Node.js globbing for amqp-like topics","dist-tags":{"latest":"0.3.8"},"versions":{"0.0.2":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.0.2","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"dependencies":{"async":"~0.2.9"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!', function ()\n{\n    matcher.match('foo.bar', function (err, vals)\n    {\n        assert.deepEqual(vals, ['it matched!']);\n    });\n});\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nasync.parallel(\n    [matcher.add.bind(matcher, '*.orange.*', 'Q1'),\n     matcher.add.bind(matcher, '*.*.rabbit', 'Q2'),\n     matcher.add.bind(matcher, 'lazy.#', 'Q2')],\n    async.mapSeries.bind(async,\n        ['quick.orange.rabbit',\n         'lazy.orange.elephant',\n         'quick.orange.fox',\n         'lazy.brown.fox',\n         'lazy.pink.rabbit',\n         'quick.brown.fox',\n         'orange',\n         'quick.orange.male.rabbit',\n         'lazy.orange.male.rabbit'],\n        matcher.match,\n        function (err, vals)\n        {\n            assert.deepEqual(vals,\n                [['Q1', 'Q2'],\n                 ['Q1', 'Q2'],\n                 ['Q1'],\n                 ['Q2'],\n                 ['Q2'],\n                 [],\n                 [],\n                 [],\n                 ['Q2']]);\n        }));\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberobjectaddtopic-val-cb\"></a><a name=\"toc_qlobberobject\"></a>[QlobberObject.add](#qlobberobjectaddtopic-val-cb)\n- <a name=\"toc_qlobberobjectremovetopic-val-cb\"></a>[QlobberObject.remove](#qlobberobjectremovetopic-val-cb)\n- <a name=\"toc_qlobberobjectmatchtopic-cb\"></a>[QlobberObject.match](#qlobberobjectmatchtopic-cb)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the globber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{String | false} compare` The function to use for sorting matches in order to remove duplicates. Defaults to lexicographical string compare. Specify `false` to turn off duplicate removal. If you store values other than strings in qlobber, pass in your own compare function.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberobject\"></a>\n\n# QlobberObject.add(topic, val, cb)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched.\n- `{Function} cb` Called when the matcher has been added.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.remove(topic, val, cb)\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} val` The value that's being matched.\n- `{Function} cb` Called when the matcher has been removed.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.match(topic, cb)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Function} cb` Called with two arguments when the match has completed:\n\n\n  - `{Any} err` `null` or an error, if one occurred.\n  - `{Array} vals` List of values that matched the topic. `vals` will be sorted and have duplicates removed unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.0.2","dist":{"shasum":"e9bbc64bf2837882fd720a8b9e72e0de27d09a78","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.0.3":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.0.3","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"dependencies":{"async":"~0.2.9"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!', function ()\n{\n    matcher.match('foo.bar', function (err, vals)\n    {\n        assert.deepEqual(vals, ['it matched!']);\n    });\n});\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nasync.parallel(\n    [matcher.add.bind(matcher, '*.orange.*', 'Q1'),\n     matcher.add.bind(matcher, '*.*.rabbit', 'Q2'),\n     matcher.add.bind(matcher, 'lazy.#', 'Q2')],\n    async.mapSeries.bind(async,\n        ['quick.orange.rabbit',\n         'lazy.orange.elephant',\n         'quick.orange.fox',\n         'lazy.brown.fox',\n         'lazy.pink.rabbit',\n         'quick.brown.fox',\n         'orange',\n         'quick.orange.male.rabbit',\n         'lazy.orange.male.rabbit'],\n        matcher.match,\n        function (err, vals)\n        {\n            assert.deepEqual(vals,\n                [['Q1', 'Q2'],\n                 ['Q1', 'Q2'],\n                 ['Q1'],\n                 ['Q2'],\n                 ['Q2'],\n                 [],\n                 [],\n                 [],\n                 ['Q2']]);\n        }));\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberobjectaddtopic-val-cb\"></a><a name=\"toc_qlobberobject\"></a>[QlobberObject.add](#qlobberobjectaddtopic-val-cb)\n- <a name=\"toc_qlobberobjectremovetopic-val-cb\"></a>[QlobberObject.remove](#qlobberobjectremovetopic-val-cb)\n- <a name=\"toc_qlobberobjectmatchtopic-cb\"></a>[QlobberObject.match](#qlobberobjectmatchtopic-cb)\n- <a name=\"toc_qlobberobjectclearcb\"></a>[QlobberObject.clear](#qlobberobjectclearcb)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the globber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{String | false} compare` The function to use for sorting matches in order to remove duplicates. Defaults to lexicographical string compare. Specify `false` to turn off duplicate removal. If you store values other than strings in qlobber, pass in your own compare function.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberobject\"></a>\n\n# QlobberObject.add(topic, val, cb)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n- `{Function} cb` Called when the matcher has been added.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.remove(topic, [val], cb)\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n- `{Function} cb` Called when the matcher has been removed.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.match(topic, cb)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Function} cb` Called with two arguments when the match has completed:\n\n\n  - `{Any} err` `null` or an error, if one occurred.\n  - `{Array} vals` List of values that matched the topic. `vals` will be sorted and have duplicates removed unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.clear(cb)\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Parameters:**\n\n- `{Function} cb` Called when the qlobber has been reset.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.0.3","dist":{"shasum":"586fd095bf628836cac2e8f5a2d10b0752da1a31","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.0.3.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.1.0":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.1.0","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(matcher.match),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberobjectaddtopic-val\"></a><a name=\"toc_qlobberobject\"></a>[QlobberObject.add](#qlobberobjectaddtopic-val)\n- <a name=\"toc_qlobberobjectremovetopic-val\"></a>[QlobberObject.remove](#qlobberobjectremovetopic-val)\n- <a name=\"toc_qlobberobjectmatchtopic\"></a>[QlobberObject.match](#qlobberobjectmatchtopic)\n- <a name=\"toc_qlobberobjectclear\"></a>[QlobberObject.clear](#qlobberobjectclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the globber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{String | false} compare` The function to use for sorting matches in order to remove duplicates. Defaults to lexicographical string compare. Specify `false` to turn off duplicate removal. If you store values other than strings in qlobber, pass in your own compare function.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberobject\"></a>\n\n# QlobberObject.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This will be sorted and have duplicates removed unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.1.0","dist":{"shasum":"50e38a7c81c6d5f256a4b861de90dfdb0081e04f","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.1.1":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.1.1","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(matcher.match),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberobjectaddtopic-val\"></a><a name=\"toc_qlobberobject\"></a>[QlobberObject.add](#qlobberobjectaddtopic-val)\n- <a name=\"toc_qlobberobjectremovetopic-val\"></a>[QlobberObject.remove](#qlobberobjectremovetopic-val)\n- <a name=\"toc_qlobberobjectmatchtopic\"></a>[QlobberObject.match](#qlobberobjectmatchtopic)\n- <a name=\"toc_qlobberobjectclear\"></a>[QlobberObject.clear](#qlobberobjectclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the globber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{String | false} compare` The function to use for sorting matches in order to remove duplicates. Defaults to lexicographical string compare. Specify `false` to turn off duplicate removal. If you store values other than strings in qlobber, pass in your own compare function.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberobject\"></a>\n\n# QlobberObject.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This will be sorted and have duplicates removed unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.1.1","dist":{"shasum":"554a970265dbc37d1c362040d764a9b891555e59","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.2.0":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.2.0","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nmatcher = new Qlobber({ remove_duplicates: true });\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{Boolean} remove_duplicates` qlobber's matching algorithm means values may be returned twice. Specify `true` to have qlobber remove duplicates from its results. Note this will incur a performance penalty. Defaults to `false`.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n# Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.2.0","dist":{"shasum":"8968314ef72a65fb549ba94621376c059405495c","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.0":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.0","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber({ remove_duplicates: true });\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n# Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates if more than one matcher matches the topic with the same value.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.0","dist":{"shasum":"500d45d2ec636dcb73ccb6f9316bbeeb89d64649","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.2":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.2","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n## Code Coverage\n\n```javascript\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://htmlpreview.github.io/?https://github.com/davedoesdev/qlobber/blob/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n# Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.2","dist":{"shasum":"34bd5cff785c6ecd71f305497a76d348a74ce981","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.3":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.3","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16","b":"git://github.com/vesln/b.git"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n## Code Coverage\n\n```javascript\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://htmlpreview.github.io/?https://github.com/davedoesdev/qlobber/blob/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```javascript\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n# Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.3","dist":{"shasum":"e11526a3d34cce3031b80748d266cc5478e80904","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.4":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.4","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.0.1","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16","b":"git://github.com/vesln/b.git"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n## Code Coverage\n\n```javascript\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://htmlpreview.github.io/?https://github.com/davedoesdev/qlobber/blob/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```javascript\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n# Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n# Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.4","dist":{"shasum":"7ccb73061f27a0c6ad11f4316caaf9bbd482ee75","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.6":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.6","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","socket-hub","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.1.0","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16","b":"git://github.com/vesln/b.git"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master) [![NPM version](https://badge.fury.io/js/qlobber.png)](http://badge.fury.io/js/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```shell\ngrunt test\n```\n\n## Lint\n\n```shell\ngrunt lint\n```\n\n## Code Coverage\n\n```shell\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://githubraw.herokuapp.com/davedoesdev/qlobber/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```shell\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n## Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n## Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.6","dist":{"shasum":"d709bbf7e1c127bbb2c43291d73ba504da19a8ce","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.6.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.7":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.7","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","cybertron","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.1.0","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16","b":"git://github.com/vesln/b.git"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master) [![NPM version](https://badge.fury.io/js/qlobber.png)](http://badge.fury.io/js/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```shell\ngrunt test\n```\n\n## Lint\n\n```shell\ngrunt lint\n```\n\n## Code Coverage\n\n```shell\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://githubraw.herokuapp.com/davedoesdev/qlobber/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```shell\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n## Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n## Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.7","dist":{"shasum":"91380d564cfae6fbde43236e4aab6422d524d11c","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.7.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]},"0.3.8":{"name":"qlobber","description":"Node.js globbing for amqp-like topics","version":"0.3.8","homepage":"https://github.com/davedoesdev/qlobber","author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"bugs":{"url":"https://github.com/davedoesdev/qlobber/issues"},"licenses":[{"type":"MIT","url":"https://github.com/davedoesdev/qlobber/blob/master/LICENCE"}],"main":"index.js","scripts":{"test":"grunt lint test","travis-test":"grunt lint test coverage coveralls"},"directories":{"test":"test","lib":"lib"},"keywords":["amqp","mqtt","rabbitmq","cybertron","ascoltatore"],"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.9","grunt-jslint":"~0.2.6","grunt-cafe-mocha":"~0.1.5","grunt-apidox":"~0.1.0","chai":"~1.6.1","istanbul":"~0.1.37","grunt-exec":"~0.4.2","coveralls":"~2.0.16","b":"git://github.com/vesln/b.git"},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master) [![NPM version](https://badge.fury.io/js/qlobber.png)](http://badge.fury.io/js/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```shell\ngrunt test\n```\n\n## Lint\n\n```shell\ngrunt lint\n```\n\n## Code Coverage\n\n```shell\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://githubraw.herokuapp.com/davedoesdev/qlobber/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```shell\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n\n## Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n## Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","readmeFilename":"README.md","_id":"qlobber@0.3.8","dist":{"shasum":"3999ddfb2d1bf649acdb120b1c1dec499e2fb977","tarball":"http://registry.npmjs.org/qlobber/-/qlobber-0.3.8.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"davedoesdev","email":"dave@davedoesdev.com"},"maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}]}},"readme":"# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nQlobber = require('qlobber').Qlobber;\nmatcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!', function ()\n{\n    matcher.match('foo.bar', function (err, vals)\n    {\n        assert.deepEqual(vals, ['it matched!']);\n    });\n});\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nasync.parallel(\n    [matcher.add.bind(matcher, '*.orange.*', 'Q1'),\n     matcher.add.bind(matcher, '*.*.rabbit', 'Q2'),\n     matcher.add.bind(matcher, 'lazy.#', 'Q2')],\n    async.mapSeries.bind(async,\n        ['quick.orange.rabbit',\n         'lazy.orange.elephant',\n         'quick.orange.fox',\n         'lazy.brown.fox',\n         'lazy.pink.rabbit',\n         'quick.brown.fox',\n         'orange',\n         'quick.orange.male.rabbit',\n         'lazy.orange.male.rabbit'],\n        matcher.match,\n        function (err, vals)\n        {\n            assert.deepEqual(vals,\n                [['Q1', 'Q2'],\n                 ['Q1', 'Q2'],\n                 ['Q1'],\n                 ['Q2'],\n                 ['Q2'],\n                 [],\n                 [],\n                 [],\n                 ['Q2']]);\n        }));\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```javascript\ngrunt test\n```\n\n## Lint\n\n```javascript\ngrunt lint\n```\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberobjectaddtopic-val-cb\"></a><a name=\"toc_qlobberobject\"></a>[QlobberObject.add](#qlobberobjectaddtopic-val-cb)\n- <a name=\"toc_qlobberobjectremovetopic-val-cb\"></a>[QlobberObject.remove](#qlobberobjectremovetopic-val-cb)\n- <a name=\"toc_qlobberobjectmatchtopic-cb\"></a>[QlobberObject.match](#qlobberobjectmatchtopic-cb)\n\n# Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the globber. Use the following properties:\n\n\n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n  - `{String | false} compare` The function to use for sorting matches in order to remove duplicates. Defaults to lexicographical string compare. Specify `false` to turn off duplicate removal. If you store values other than strings in qlobber, pass in your own compare function.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberobject\"></a>\n\n# QlobberObject.add(topic, val, cb)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched.\n- `{Function} cb` Called when the matcher has been added.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.remove(topic, val, cb)\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} val` The value that's being matched.\n- `{Function} cb` Called when the matcher has been removed.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n# QlobberObject.match(topic, cb)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Function} cb` Called with two arguments when the match has completed:\n\n\n  - `{Any} err` `null` or an error, if one occurred.\n  - `{Array} vals` List of values that matched the topic. `vals` will be sorted and have duplicates removed unless you configured [Qlobber](#qlobberoptions) otherwise.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberObject](#toc_qlobberobject)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n","maintainers":[{"name":"davedoesdev","email":"dave@davedoesdev.com"}],"time":{"modified":"2013-12-26T07:53:04.932Z","created":"2013-06-16T08:23:34.754Z","0.0.2":"2013-06-16T08:23:37.606Z","0.0.3":"2013-06-17T06:42:14.254Z","0.1.0":"2013-06-17T22:14:24.195Z","0.1.1":"2013-06-17T22:33:03.439Z","0.2.0":"2013-06-21T09:53:26.374Z","0.3.0":"2013-06-22T20:32:59.489Z","0.4.0":"2013-06-27T21:20:42.300Z","0.4.1":"2013-06-27T21:24:49.043Z","0.4.2":"2013-06-27T22:17:33.568Z","0.3.2":"2013-06-28T09:31:53.794Z","0.3.3":"2013-07-01T22:13:43.113Z","0.3.4":"2013-07-04T08:11:41.451Z","0.3.6":"2013-10-01T06:39:01.912Z","0.3.7":"2013-12-25T10:34:35.635Z","0.3.8":"2013-12-26T07:53:04.932Z"},"author":{"name":"David Halls","email":"dave@davedoesdev.com","url":"http://www.davedoesdev.com"},"repository":{"type":"git","url":"https://github.com/davedoesdev/qlobber.git"},"_attachments":{},"_etag":"\"6IQSFEJ7VAX7PYMG9AR3JJO9I\""}